version: '3.9'


services:
  db-mysql:
    image: myqlgerandodb:latest
    cap_add:
      - SYS_NICE
    container_name: mysql-container-docker
    restart: always
    ports:
      - "3306:3306"
    healthcheck:
      test: mysqlshow -uroot -proot
      timeout: 2s
      retries: 3  
      
#      test: ["CMD mysql uroot  -p;", "root", "ENTER"," show databases;"] 
       
  quarkus-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quarkus-container-docker
    env_file:
     - ./.env
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://db-mysql:3306/banca
    mem_limit: 128m
    ports:
      - "8080:8080"  # the HTTP endpoint
    depends_on:
      db-mysql:
          condition: service_healthy
#         condition: service_completed_successfully 
      
      
#    networks:
#      mynetwork: {}
      
  #  network_mode: bridge
#networks:
#  mynetwork:
#    external: true
#    name: host      
      
 #   networks:
 #     - host 
#      - quarkusNet
            
#  networks:
#    host:
#      name: host
#      external: true

#networks:
#  quarkusNet:
#    driver: host 

              
      
      
#     - TZ=${TZ}
#   network_mode: bridge  
#   networks:
#     mynetwork: {} 
#    network_mode: "host"       
#      - host
#      - quarkusNet    
#    image: quarkus-dockfile
#    environment:
#      MYSQL_DATABASE: banca
#       MYSQL_ROOT_USER: root
#       MYSQL_ROOT_PASSWORD: root 
#      MYSQL_ROOT_HOST: mysql-container-docker 
#      MYSQL_HOST: mysql-container-docker 
#      MYSQL_USER: root
#      MYSQL_PASSWORD: root 
#       MYSQL_PORT: 3306
      
#    command: --default-authentication-plugin=mysql_native_password 
#    command: printenv  
 #     QUARKUS_DATASOURCE_ROOT_USERNAME: root
 #     QUARKUS_DATASOURCE_ROOT_PASSWORD: root
  #    QUARKUS_DATASOURCE_ROOT_PASSWORD: ""
  #    MYSQL_ROOT_PASSWORD: root
  #    MYSQL_ROOT_USER: root
  #    MYSQL_DATABASE: banca 
  #    MYSQL_HOST: mysql-container-docker 
  #    MYSQL_USER: ${MYSQL_USER}
  #    MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  #    QUARKUS_DATASOURCE_JDBC_URL: jdbc:mysql://${HOST_MACHINE_MYPORT}:${HOST_MACHINE_MYSQL_PORT}/${MYSQL_DATABASE}
  #    - QUARKUS_DATASOURCE_USERNAME=${MYSQL_USER}
  #    - QUARKUS_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
#COMANDO DE EXECUCAO --NO LOCAL DO ARQUIVO
#docker container inspect quarkus-container-docker
#docker-compose up -d ---  mvnw package -Dquarkus.package.type=uber-jar
#docker network ls      
#docker inspect proj-db-1   VER DADOS DETALHADOS DA NETWORK    
#SE NAO INFORMAR NETWORK ELE USA A DEFAULT
#LINK CONTAINER docker network connect --link proj-db-1 proj_quarkusNet proj-quarkus-service-1
#NETWORK REDE DE COMUNICAO ENTRE CONTAINER
#LG DOCKER tubipinho @GMAIL147258

#COMMANDO PARA VER CONFIGURACAO docker-compose -f docker-compose.yml config
#docker-compose -f docker-compose.yml up - COM LOG



#Commands:
#  build       Build or rebuild services
#  convert     Converts the compose file to platform's canonical format
#  cp          Copy files/folders between a service container and the local filesystem
#  create      Creates containers for a service.
#  down        Stop and remove containers, networks
#  events      Receive real time events from containers.
#  exec        Execute a command in a running container.
#  images      List images used by the created containers
#  kill        Force stop service containers.
#  logs        View output from containers
#  ls          List running compose projects
#  pause       Pause services
#  port        Print the public port for a port binding.
#  ps          List containers
#  pull        Pull service images
#  push        Push service images
#  restart     Restart containers
#  rm          Removes stopped service containers
#  run         Run a one-off command on a service.
#  start       Start services
#  stop        Stop services
#  top         Display the running processes
#  unpause     Unpause services
#  up          Create and start containers
#  version     Show the Docker Compose version information